= nahoWikiplugin - Wiki for symfony =

== Overview ==

This plugin allows you to embed a full Wiki system within your Symfony application with the following features :
- Using Markdown (requires sfMarkdownPlugin) as markup language
- Anyone can create or edit pages (if authenticated, the username is stored via getUser()->__toString(), else the IP is stored)
- Every change is stored in a new revision of a page
- To optimize the space in the database : old revisions keep a compressed version of the content, only latest revision has uncompressed version of the content
- You can view and edit old revisions of a page
- You can view history of a page
- You can view an inline diff of two revisions for a page
- As any action, you can restrict access to edition in security.yml (action "edit")
- Every page has an associated discussion page like in MediaWiki.
- Every user has a dedicated page with the list of all his contributions, and an associated discussion page.

You can use it as usual Wiki systems, you can easily add features («Special» pages are in the todo-list and will ease the extension of this plugin in your application), and thanks to helpers and/or components you could even think about using this as a simple CMS !

== Screenshots ==

[[Image(nahoWikiPlugin_page.png, 30%)]]  
[[Image(nahoWikiPlugin_diff.png, 30%)]]  
[[Image(nahoWikiPlugin_user.png, 30%)]]  
[[Image(nahoWikiPlugin_edit.png, 30%)]]  

== Requirements ==

The prerequisites for using the `nahoWiki` plugin are:
 - Currently only the Markdown syntax is supported, and this makes the [http://trac.symfony-project.com/trac/wiki/sfMarkdownPlugin sfMarkdownPlugin] a mandatory dependancy.
 - Your `myUser` class must define a well written `__toString()` method, as the plugin will only store this data (no ID is stored, all the history of a user is based on his nickname given by `__toString()`). If you don't have a user-managerment system, [http://trac.symfony-project.com/trac/wiki/sfGuardPlugin sfGuardPlugin] is a good choice but is not mandatory.

== Installation ==

=== Installing the plugin ===

Choose one of the following solutions, depending on your environment and your preferences.

==== PEAR ====

To install the plugin for a symfony project, the usual process is to use the symfony command line requiring up-to-date PEAR installation :
{{{
$ symfony plugin-install symfony/nahoWikiPlugin
}}}

==== Subversion ====

To install the plugin from SVN you have numerous options, just check it out (or export if you don't plan to update it later) from `http://svn.symfony-project.com/plugins/nahoWikiPlugin/trunk` :
{{{
$ svn checkout http://svn.symfony-project.com/plugins/nahoWikiPlugin/trunk plugins/nahoWikiPlugin
}}}

Note that you can always use the `tags` directory if you want to use a given version. You will always be able to switch from a version to another :
{{{
// Switch to a specific version (the trunk has a bug or a backward-incompatibility I can't live with)
$ svn switch http://svn.symfony-project.com/plugins/nahoWikiPlugin/tags/the.version.i.want plugins/nahoWikiPlugin
// Switch back to trunk (I'm ready to use it)
$ svn switch http://svn.symfony-project.com/plugins/nahoWikiPlugin/trunk plugins/nahoWikiPlugin
}}}

If your project is already under subversion, you can very easily use the SVN install with svn:externals
{{{
$ svn propedit svn:externals plugins
// Add the following line :
nahoWikiPlugin http://svn.symfony-project.com/plugins/nahoWikiPlugin/trunk
}}}
You will be able to switch later by just changing the URL.

==== Manually ====

Alternatively, if you don't have PEAR installed, you can download the latest package attached to this plugin's wiki page and extract it under your project's `plugins/` directory.

=== Integrating in your application ===

Check the contents of your `web/` folder, it must contains a folder (or a symlink) named `nahoWikiPlugin/`. If not, you will also have to copy the contents of the `plugins/nahoWikiPlugin/web/` directory into a `web/nahoWikiPlugin/` directory (or make a symlink).

Rebuild the model, generate the SQL code for the new tables and insert it into your database:
{{{
$ php symfony propel-build-all
}}}

Clear the cache to enable the autoloading to find the new classes:
{{{
$ php symfony cc
}}}

Enable the new `nahoWiki`  module in your application, via the `settings.yml` file.
{{{
// in myproject/apps/frontend/config/settings.yml
all:
  .settings:
    enabled_modules:        [default, nahoWiki]
}}}

Start using the plugin by browsing to the frontend module's default page:
{{{ 
http://myproject/frontend_dev.php/nahoWiki
}}}

== Slots, Helpers, Components ==

@TODO

== Configuration ==

=== Schema customization ===

If you install [http://trac.symfony-project.com/wiki/sfPropelAlternativeSchemaPluginsfPropelAlternativeSchemaPlugin `sfPropelAlternativeSchema` plugin], you can customize this plugin's schema by creating a `nahoWikiPlugin_schema.custom.yml` file under your project's `config/` directory. This allows you to customize the connection name, table names, and even foreign class associations. Refer to the [http://trac.symfony-project.com/wiki/sfPropelAlternativeSchemaPluginsfPropelAlternativeSchemaPlugin README file] for more information.

=== app.yml ===

Some of the features of the plugin can be altered by configuration. To do so, add some of the following lines to your application's `app.yml`:

{{{
all:
  nahoWikiPlugin:
    @TODO
}}}

=== Routing rules ===

The plugin comes with the following routing rules :

{{{
@TODO
}}}

You can add your own routing rules in your `routing.yml` folder.

=== Look and Feel ===

The `nahoWiki` module comes with a default stylesheet. You can choose to use your own stylesheet instead of the default one. To do so, you must create an empty `nahoWiki` module inside your application with just one `config/view.yml` file in it, with the following content:

{{{
all:
  stylesheets: [-/nahoWikiPlugin/css/default.css, myCustomStylesheet]
}}}

== TODO ==

 * Any page can have associated credentials, which will be required to view and/or edit the page and its subpages ("Page:SubPage" is a subpage of "Page"). These page-wide credentials can be managed in a auto-generated admin module.
 * A page can display a menu of its subpages with a special tag
 * A page has a menu of the page's sections on its top
 * A special tag provides inner links (links to other pages in the wiki)
 * Everything must be configurable : special tags, choice of the markup engine, etc...
 * Integration of the InterWiki system (configurable, of course)
 * Make helpers (e.g. for wiki-links) and components (e.g. for a CMS use)
 * Support alternative languages for a page
 * Add a Javascript toolbar to help contributor (depends on the markup engine)
 * AJAX edition
 * Provide the index by title, and index by date
 * Provide the «last changes» action
 * Search engine
 * Media uploads
 * Add and manage the states of a page : draft, hidden, public, etc...

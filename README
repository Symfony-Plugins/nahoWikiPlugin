= nahoWikiplugin - Wiki for symfony =

== Overview ==

This plugin allows you to embed a full Wiki system within your Symfony application with the following features :
- Using Markdown (requires sfMarkdownPlugin) as markup language
- Anyone can create or edit pages (if authenticated, the username is stored via getUser()->__toString(), else the IP is stored)
- Every change is stored in a new revision of a page
- To optimize the space in the database : old revisions keep a compressed version of the content, only latest revision has uncompressed version of the content
- You can view and edit old revisions of a page
- You can view history of a page
- You can view an inline diff of two revisions for a page
- As any action, you can restrict access to edition in security.yml (action "edit")
- Every page has an associated discussion page like in MediaWiki.
- Every user has a dedicated page with the list of all his contributions, and an associated discussion page.




0.0.2 (permission and contribution management)
- Any page can have associated credentials, which will be required to view and/or edit the page and its subpages ("Page:SubPage" is a subpage of "Page"). These page-wide credentials can be managed in a auto-generated admin module.

0.0.3 (navigation)
- A page can display a menu of its subpages with a special tag
- A page has a menu of the page's sections on its top
- A special tag provides inner links (links to other pages in the wiki)

0.0.4 (configuration)
- Taking a look around the code to make configurable everything that is not yet configurable in app.yml
- This must include the choice of the "inner links" tag, the "index menu" tag, and more than anything the choice of the syntax (you must be able to use any other system)
- Integration of the InterWiki system (configurable, of course)

0.0.5 (tools)
- Refactoring to make some components, slots, helper, etc… to be used anywhere in the project

0.0.6 (i18n)
- Support of alternative languages for a page

0.0.7 (interface)
- It's time to add a pure stylish CSS to that Wink
- Adding Javascript toolbar to help contributor (must be thought to be configurable as the syntax can be changed)
- AJAX edition

0.0.8 (indexing)
- Generalization of the indexes to provide indexByTitle and indexByDate
- Search engine

1.0.0 (first public stable release)
- Bugfixes so I can consider everything is stable. It should not be too hard as I obviously fix bugs step by step Razz
- Query optimizations



We can then think about next features like images uploads (that is not so simple as in my sense it MUST provide a quota and resizing system which must be configurable) & co.

I'm hesitating about the possibility to add a "state" to a revision, which would be "draft" or "published" : when you don't specify a revision you view the last "published" revision, but you still can edit a "draft" revision until someone tells it's "published" (this field could require some additional credentials). It may be in future releases.




You can use it as usual Wiki systems, you can easily add features («Special» pages are in the todo-list and will ease the extension of this plugin in your application), and thanks to helpers and/or components you could even think about using this as a simple CMS !

== Screenshots ==

[[Image(nahoWikiPlugin_page.png, 30%)]]  
[[Image(nahoWikiPlugin_diff.png, 30%)]]  
[[Image(nahoWikiPlugin_user.png, 30%)]]  
[[Image(nahoWikiPlugin_edit.png, 30%)]]  

== Requirements ==

The prerequisites for using the `nahoWiki` plugin are:
 - Currently only the Markdown syntax is supported, and this makes the [http://trac.symfony-project.com/trac/wiki/sfMarkdownPlugin sfMarkdownPlugin] a mandatory dependancy.
 - Your `myUser` class must define a well written `__toString()` method, as the plugin will only store this data (no ID is stored, all the history of a user is based on his nickname given by `__toString()`). If you don't have a user-managerment system, [http://trac.symfony-project.com/trac/wiki/sfGuardPlugin sfGuardPlugin] is a good choice but is not mandatory.
 - If you want to use RSS feeds, you must install the [http://trac.symfony-project.com/trac/wiki/sfFeed2Plugin sfFeed2Plugin].

== Installation ==
 
To install the plugin for a symfony project, the usual process is to use the symfony command line:
{{{
$ php symfony plugin-install http://plugins.symfony-project.com/sfSimpleForumPlugin
}}}

Alternatively, if you don't have PEAR installed, you can download the latest package attached to this plugin's wiki page and extract it under your project's `plugins/` directory. You will also have to copy the contents of the `myproject/plugins/sfSimpleForumPlugin/web/` directory into a `myproject/web/sfSimpleForumPlugin/` directory.

Rebuild the model, generate the SQL code for the new tables and insert it into your database:
{{{
$ php symfony propel-build-all
}}}

Clear the cache to enable the autoloading to find the new classes:
{{{
$ php symfony cc
}}}

You can load the included fixtures to start using the forum with test data.
{{{
$ php symfony propel-load-data frontend plugins\sfSimpleForumPlugin\data\fixtures
}}}

Enable the new `sfSimpleForum`  module in your application, via the `settings.yml` file.
{{{
// in myproject/apps/frontend/config/settings.yml
all:
  .settings:
    enabled_modules:        [default, sfSimpleForum]
}}}

Start using the plugin by browsing to the frontend module's default page:
{{{ 
http://myproject/frontend_dev.php/sfSimpleForum
}}}

If you want to enable the plugin administration interface, you have to enable two more modules. You can do so in your main application or in a backend application. the following example is for a 'backend' application:

{{{
// in myproject/apps/backend/config/settings.yml
all:
  .settings:
    enabled_modules:        [default, sfSimpleForumCategoryAdmin, sfSimpleForumForumAdmin]
}}}

Configure the plugin categories and forums by browsing to the administration modules default page:
{{{ 
http://myproject/backend_dev.php/sfSimpleForumCategoryAdmin
http://myproject/backend_dev.php/sfSimpleForumForumAdmin
}}}

== Slots ==

The templates of the `sfSimpleForum` module define some slots that you cna use inside your layout:
  - auto_discovery_link_tag: For the auto discovery links, to be placed in the `<head>` section
  - forum_navigation: For the forum breadcrumb and actions

An example layout for a standard display is given below.

{{{
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>

<?php include_http_metas() ?>
<?php include_metas() ?>

<?php include_title() ?>
<?php include_slot('auto_discovery_link_tag') ?>

<link rel="shortcut icon" href="/favicon.ico" />

</head>
<body>

<div class="sfSimpleForum">
  <?php include_slot('forum_navigation') ?>
</div>

<?php echo $sf_data->getRaw('sf_content') ?>

</body>
</html>
}}}

== Configuration ==

=== Schema customization ===

If you install the `sfPropelAlternativeSchemaPlugin`, you can customize this plugin's schema by creating a `sfSimpleForumPlugin_schema.custom.yml` file under your project's `config/` directory. This allows you to customize the connection name, table names, and even foreign class associations. Refer to the [http://trac.symfony-project.com/wiki/sfPropelAlternativeSchemaPluginsfPropelAlternativeSchemaPlugin README file] for more information.

=== app.yml ===

Some of the features of the plugin can be altered by configuration. To do so, add some of the following lines to your application's `app.yml`:

{{{
all:
  sfSimpleForumPlugin:
    forum_name:             My symfony forum
    display_categories:     true
    use_feeds:              true  # requires sfFeed2Plugin
    count_views:            true  # count each time a topic is viewed. Turn off to increase performance
    max_per_block:          10    # maximum number of links displayed in a block
    include_breadcrumb:     true  # include breadcrumb slot content. Turn off if you don't use the breadcrumb.
    breadcrumb_separator:   ' » ' # separator for breadcrumb trail
    max_per_page:           10    # maximum threads or messages per page
    pages_displayed:        5     # maximum pages displayed by the pager navigation
    feed_max:               10    # maximum messages served by feed
    show_author_details:    false # display number of messages of post authors
    allow_new_topic_outside_forum: true
    display_post_edited_by: true
}}}

=== Routing rules ===

The plugin doesn't come with any routing rule. However, you can add some of your own to make the URLs look nicer. An example of set of rules could be as follows:

{{{
forum_home: 
  url:   /forum
  param: { module: sfSimpleForum, action: forumList }

forum_latest_messages: 
  url:   /forum/latest/:page
  param: { module: sfSimpleForum, action: latestPosts, page: 1 }
  requirements: { page: \d+ }

forum_latest_messages_feed: 
  url:   /forum/latest/feed
  param: { module: sfSimpleForum, action: latestPostsFeed }
  
forum_forum: 
  url:   /forum/:forum_name/:page
  param: { module: sfSimpleForum, action: forum, page: 1 }
  requirements: { page: \d+ }

forum_latest_messages_for_forum: 
  url:   /forum/:forum_name/latest/:page
  param: { module: sfSimpleForum, action: latestForumPosts, page: 1 }
  requirements: { page: \d+ }

forum_latest_messages_for_forum_feed: 
  url:   /forum/:forum_name/latest/feed
  param: { module: sfSimpleForum, action: latestForumPostsFeed }

forum_topic: 
  url:   /forum/topic/:id/:stripped_title/:page
  param: { module: sfSimpleForum, action: topic, page: 1 }
  requirements: { page: \d+ }

forum_topic_feed:
  url:   /forum/topic/:id/:stripped_title/feed
  param: { module: sfSimpleForum, action: topicFeed }

forum_new_topic:
  url:   /forum/new_topic/:forum_name
  param: { module: sfSimpleForum, action: createTopic }

forum_latest_messages_by_user: 
  url:   /forum/user/:username/:page
  param: { module: sfSimpleForum, action: latestUserPosts, page: 1 }
  requirements: { page: \d+ }

forum_latest_messages_by_user_feed: 
  url:   /forum/user/:username/rss
  param: { module: sfSimpleForum, action: latestUserPostsFeed }
  
forum_post: 
  url:   /forum_message/:id
  param: { module: sfSimpleForum, action: post }
}}}

=== Look and Feel ===

The `sfSimpleForum` module comes with a default stylesheet. You can choose to use your own stylesheet instead of the default one. To do so, you must create an empty `sfSimpleForum` module inside your application with just one `config/view.yml` file in it, with the followin content:

{{{
all:
  stylesheets: [-/sfSimpleForumPlugin/css/default.css, myCustomStylesheet]
}}}

== TODO ==

 * Authors can edit a message during its first minutes
 * Moderators can edit a message
 * Moderators can move a topic to another forum and a message to another topic
 * Add images to make the default style less ugly
 * Search engine
 * Subscribe to a topic by email
 * Make the plugin sfGuard-independent (cf sfSimpleBlogPlugin)
 * Package with other plugins into an application
